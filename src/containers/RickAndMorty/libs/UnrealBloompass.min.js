/* eslint-disable */ import{AdditiveBlending,Color,LinearFilter,MeshBasicMaterial,RGBAFormat,ShaderMaterial,UniformsUtils,Vector2,Vector3,WebGLRenderTarget}from"three";import{CopyShader}from"three/examples/jsm/shaders/CopyShader";import{LuminosityHighPassShader}from"three/examples/jsm/shaders/LuminosityHighPassShader";import{OrthographicCamera,PlaneGeometry,Mesh}from"three/build/three.module.js";function Pass(){this.enabled=!0,this.needsSwap=!0,this.clear=!1,this.renderToScreen=!1}Object.assign(Pass.prototype,{setSize:function(){},render:function(){console.error("THREE.Pass: .render() must be implemented in derived pass.")}}),Pass.FullScreenQuad=function(){var camera=new OrthographicCamera(-1,1,1,-1,0,1),geometry=new PlaneGeometry(2,2),FullScreenQuad=function(material){this._mesh=new Mesh(geometry,material)};return Object.defineProperty(FullScreenQuad.prototype,"material",{get:function(){return this._mesh.material},set:function(value){this._mesh.material=value}}),Object.assign(FullScreenQuad.prototype,{dispose:function(){this._mesh.geometry.dispose()},render:function(renderer){renderer.render(this._mesh,camera)}}),FullScreenQuad}();var UnrealBloomPass=function(resolution,strength,radius,threshold){Pass.call(this),this.strength=void 0!==strength?strength:1,this.radius=radius,this.threshold=threshold,this.resolution=void 0!==resolution?new Vector2(resolution.x,resolution.y):new Vector2(256,256),this.clearColor=new Color(0,0,0);var pars={minFilter:LinearFilter,magFilter:LinearFilter,format:RGBAFormat};this.renderTargetsHorizontal=[],this.renderTargetsVertical=[],this.nMips=5;var resx=Math.round(this.resolution.x/2),resy=Math.round(this.resolution.y/2);this.renderTargetBright=new WebGLRenderTarget(resx,resy,pars),this.renderTargetBright.texture.name="UnrealBloomPass.bright",this.renderTargetBright.texture.generateMipmaps=!1;for(var i=0;i<this.nMips;i++){var renderTargetHorizonal=new WebGLRenderTarget(resx,resy,pars);renderTargetHorizonal.texture.name="UnrealBloomPass.h"+i,renderTargetHorizonal.texture.generateMipmaps=!1,this.renderTargetsHorizontal.push(renderTargetHorizonal);var renderTargetVertical=new WebGLRenderTarget(resx,resy,pars);renderTargetVertical.texture.name="UnrealBloomPass.v"+i,renderTargetVertical.texture.generateMipmaps=!1,this.renderTargetsVertical.push(renderTargetVertical),resx=Math.round(resx/2),resy=Math.round(resy/2)}void 0===LuminosityHighPassShader&&console.error("UnrealBloomPass relies on LuminosityHighPassShader");var highPassShader=LuminosityHighPassShader;this.highPassUniforms=UniformsUtils.clone(highPassShader.uniforms),this.highPassUniforms.luminosityThreshold.value=threshold,this.highPassUniforms.smoothWidth.value=.01,this.materialHighPassFilter=new ShaderMaterial({uniforms:this.highPassUniforms,vertexShader:highPassShader.vertexShader,fragmentShader:highPassShader.fragmentShader,defines:{}}),this.separableBlurMaterials=[];for(var kernelSizeArray=[3,5,7,9,11],resx=Math.round(this.resolution.x/2),resy=Math.round(this.resolution.y/2),i=0;i<this.nMips;i++)this.separableBlurMaterials.push(this.getSeperableBlurMaterial(kernelSizeArray[i])),this.separableBlurMaterials[i].uniforms.texSize.value=new Vector2(resx,resy),resx=Math.round(resx/2),resy=Math.round(resy/2);this.compositeMaterial=this.getCompositeMaterial(this.nMips),this.compositeMaterial.uniforms.blurTexture1.value=this.renderTargetsVertical[0].texture,this.compositeMaterial.uniforms.blurTexture2.value=this.renderTargetsVertical[1].texture,this.compositeMaterial.uniforms.blurTexture3.value=this.renderTargetsVertical[2].texture,this.compositeMaterial.uniforms.blurTexture4.value=this.renderTargetsVertical[3].texture,this.compositeMaterial.uniforms.blurTexture5.value=this.renderTargetsVertical[4].texture,this.compositeMaterial.uniforms.bloomStrength.value=strength,this.compositeMaterial.uniforms.bloomRadius.value=.1,this.compositeMaterial.needsUpdate=!0;var bloomFactors=[1,.8,.6,.4,.2];this.compositeMaterial.uniforms.bloomFactors.value=bloomFactors,this.bloomTintColors=[new Vector3(1,1,1),new Vector3(1,1,1),new Vector3(1,1,1),new Vector3(1,1,1),new Vector3(1,1,1)],this.compositeMaterial.uniforms.bloomTintColors.value=this.bloomTintColors,void 0===CopyShader&&console.error("UnrealBloomPass relies on CopyShader");var copyShader=CopyShader;this.copyUniforms=UniformsUtils.clone(copyShader.uniforms),this.copyUniforms.opacity.value=1,this.materialCopy=new ShaderMaterial({uniforms:this.copyUniforms,vertexShader:copyShader.vertexShader,fragmentShader:copyShader.fragmentShader,blending:AdditiveBlending,depthTest:!1,depthWrite:!1,transparent:!0}),this.enabled=!0,this.needsSwap=!1,this.oldClearColor=new Color,this.oldClearAlpha=1,this.basic=new MeshBasicMaterial,this.fsQuad=new Pass.FullScreenQuad(null)};UnrealBloomPass.prototype=Object.assign(Object.create(Pass.prototype),{constructor:UnrealBloomPass,dispose:function(){for(var i=0;i<this.renderTargetsHorizontal.length;i++)this.renderTargetsHorizontal[i].dispose();for(var i=0;i<this.renderTargetsVertical.length;i++)this.renderTargetsVertical[i].dispose();this.renderTargetBright.dispose()},setSize:function(width,height){var resx=Math.round(width/2),resy=Math.round(height/2);this.renderTargetBright.setSize(resx,resy);for(var i=0;i<this.nMips;i++)this.renderTargetsHorizontal[i].setSize(resx,resy),this.renderTargetsVertical[i].setSize(resx,resy),this.separableBlurMaterials[i].uniforms.texSize.value=new Vector2(resx,resy),resx=Math.round(resx/2),resy=Math.round(resy/2)},render:function(renderer,writeBuffer,readBuffer,deltaTime,maskActive){this.oldClearColor.copy(renderer.getClearColor(new Color(0))),this.oldClearAlpha=renderer.getClearAlpha();var oldAutoClear=renderer.autoClear;renderer.autoClear=!1,renderer.setClearColor(this.clearColor,0),maskActive&&renderer.state.buffers.stencil.setTest(!1),this.renderToScreen&&(this.fsQuad.material=this.basic,this.basic.map=readBuffer.texture,renderer.setRenderTarget(null),renderer.clear(),this.fsQuad.render(renderer)),this.highPassUniforms.tDiffuse.value=readBuffer.texture,this.highPassUniforms.luminosityThreshold.value=this.threshold,this.fsQuad.material=this.materialHighPassFilter,renderer.setRenderTarget(this.renderTargetBright),renderer.clear(),this.fsQuad.render(renderer);for(var inputRenderTarget=this.renderTargetBright,i=0;i<this.nMips;i++)this.fsQuad.material=this.separableBlurMaterials[i],this.separableBlurMaterials[i].uniforms.colorTexture.value=inputRenderTarget.texture,this.separableBlurMaterials[i].uniforms.direction.value=UnrealBloomPass.BlurDirectionX,renderer.setRenderTarget(this.renderTargetsHorizontal[i]),renderer.clear(),this.fsQuad.render(renderer),this.separableBlurMaterials[i].uniforms.colorTexture.value=this.renderTargetsHorizontal[i].texture,this.separableBlurMaterials[i].uniforms.direction.value=UnrealBloomPass.BlurDirectionY,renderer.setRenderTarget(this.renderTargetsVertical[i]),renderer.clear(),this.fsQuad.render(renderer),inputRenderTarget=this.renderTargetsVertical[i];this.fsQuad.material=this.compositeMaterial,this.compositeMaterial.uniforms.bloomStrength.value=this.strength,this.compositeMaterial.uniforms.bloomRadius.value=this.radius,this.compositeMaterial.uniforms.bloomTintColors.value=this.bloomTintColors,renderer.setRenderTarget(this.renderTargetsHorizontal[0]),renderer.clear(),this.fsQuad.render(renderer),this.fsQuad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=this.renderTargetsHorizontal[0].texture,maskActive&&renderer.state.buffers.stencil.setTest(!0),this.renderToScreen?(renderer.setRenderTarget(null),this.fsQuad.render(renderer)):(renderer.setRenderTarget(readBuffer),this.fsQuad.render(renderer)),renderer.setClearColor(this.oldClearColor,this.oldClearAlpha),renderer.autoClear=oldAutoClear},getSeperableBlurMaterial:function(kernelRadius){return new ShaderMaterial({defines:{KERNEL_RADIUS:kernelRadius,SIGMA:kernelRadius},uniforms:{colorTexture:{value:null},texSize:{value:new Vector2(.5,.5)},direction:{value:new Vector2(.5,.5)}},vertexShader:"varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}",fragmentShader:"#include <common>\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\t\t\t\tuniform vec2 direction;\t\t\t\t\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\t\t\t\t}\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\t\t\t\t\tfloat fSigma = float(SIGMA);\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\t\t\t\t\tfloat alphaSum = 0.0;\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\t\t\t\t\t\tfloat x = float(i);\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\t\t\t\t\t\tvec4 sample1 = texture2D( colorTexture, vUv + uvOffset);\t\t\t\t\t\tvec4 sample2 = texture2D( colorTexture, vUv - uvOffset);\t\t\t\t\t\tdiffuseSum += (sample1.rgb + sample2.rgb) * w;\t\t\t\t\t\talphaSum += (sample1.a + sample2.a) * w;\t\t\t\t\t\tweightSum += 2.0 * w;\t\t\t\t\t}\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, alphaSum/weightSum);\n\t\t\t\t}"})},getCompositeMaterial:function(nMips){return new ShaderMaterial({defines:{NUM_MIPS:nMips},uniforms:{blurTexture1:{value:null},blurTexture2:{value:null},blurTexture3:{value:null},blurTexture4:{value:null},blurTexture5:{value:null},dirtTexture:{value:null},bloomStrength:{value:1},bloomFactors:{value:null},bloomTintColors:{value:null},bloomRadius:{value:0}},vertexShader:"varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}",fragmentShader:"varying vec2 vUv;\t\t\t\tuniform sampler2D blurTexture1;\t\t\t\tuniform sampler2D blurTexture2;\t\t\t\tuniform sampler2D blurTexture3;\t\t\t\tuniform sampler2D blurTexture4;\t\t\t\tuniform sampler2D blurTexture5;\t\t\t\tuniform sampler2D dirtTexture;\t\t\t\tuniform float bloomStrength;\t\t\t\tuniform float bloomRadius;\t\t\t\tuniform float bloomFactors[NUM_MIPS];\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\t\t\t\t\t\t\t\tfloat lerpBloomFactor(const in float factor) { \t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\t\t\t\t}\t\t\t\t\t\t\t\tvoid main() {\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) + \t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) + \t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) + \t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) + \t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\t\t\t\t}"})}}),UnrealBloomPass.BlurDirectionX=new Vector2(1,0),UnrealBloomPass.BlurDirectionY=new Vector2(0,1);export{UnrealBloomPass};